[{"/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/index.js":"1","/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/App.js":"2","/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/reportWebVitals.js":"3","/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/Components/Navbar/Navbar.js":"4","/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/Components/Albums/AddAlbum.js":"5","/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/Components/Login/Login.js":"6","/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/getWeb3.js":"7","/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/Components/Albums/Albums.js":"8","/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/Components/Footer/Footer.js":"9","/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/Components/Home/Home.js":"10","/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/Components/Albums/Confirm.js":"11","/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/Components/Albums/AddSong.js":"12","/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/Components/Albums/Songs.js":"13"},{"size":500,"mtime":1608510763753,"results":"14","hashOfConfig":"15"},{"size":3728,"mtime":1608596202035,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1608510763753,"results":"17","hashOfConfig":"15"},{"size":2699,"mtime":1608598206041,"results":"18","hashOfConfig":"15"},{"size":3427,"mtime":1608595093939,"results":"19","hashOfConfig":"15"},{"size":1611,"mtime":1608529313068,"results":"20","hashOfConfig":"15"},{"size":1144,"mtime":1608529313072,"results":"21","hashOfConfig":"15"},{"size":6433,"mtime":1608596402012,"results":"22","hashOfConfig":"15"},{"size":206,"mtime":1608529317088,"results":"23","hashOfConfig":"15"},{"size":2219,"mtime":1608529317088,"results":"24","hashOfConfig":"15"},{"size":2132,"mtime":1608529317084,"results":"25","hashOfConfig":"15"},{"size":7546,"mtime":1608597867389,"results":"26","hashOfConfig":"15"},{"size":6579,"mtime":1608599330813,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"yovenx",{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/index.js",[],["60","61"],"/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/App.js",["62","63"],"// import logo from './logo.svg';\nimport './App.css';\nimport React, { Component } from 'react';\nimport getWeb3 from \"./getWeb3\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from './Components/Navbar/Navbar.js';\nimport Albums from './Components/Albums/Albums.js';\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\nimport AddAlbum from './Components/Albums/AddAlbum.js';\nimport Login from './Components/Login/Login.js';\nimport Footer from './Components/Footer/Footer.js';\nimport Home from './Components/Home/Home.js'\nimport AlbumContract from './contracts/Album.json';\nimport { Nav } from 'react-bootstrap';\nimport AddSong from './Components/Albums/AddSong';\nimport Songs from './Components/Albums/Songs'\n\n\n\n\n// eslint-disable-next-line \nclass App extends Component {\n  state = {web3: null, accounts: null, contract: null, albumAdresses:[]};\n\n  addAlbumAddresses = async (addressAdd)=>{\n    this.state.albumAdresses.push(addressAdd)\n  }\n  \n  getAlbumAddresses = async ()=>{\n    return this.state.albumAdresses\n  }\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 mainInstance.\n      const web3 = await getWeb3();\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract mainInstance.\n      const networkId = 5777;\n      const deployedNetwork = AlbumContract.networks[networkId];\n      const mainInstance = new web3.eth.Contract(\n        AlbumContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      mainInstance.address = deployedNetwork.address;\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: mainInstance }, this.initiate);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  initiate = async () => {\n    // const { accounts, contract, web3,albumAdresses } = this.state;\n    // console.log(\"account: \", accounts[0]);\n    // console.log(\"methods\", contract.methods);\n    // // // await contract.methods.setData(\"War\", \"Demon Hunter\", \"https://upload.wikimedia.org/wikipedia/en/c/cb/DemonHunter_War.jpg\").send({ from: accounts[0] });\n    // // let response  = await contract.methods.album().call();\n    // // // Creating new contracts\n    // // //let newInstance = await new web3.eth.Contract(AlbumContract.abi).deploy({data: AlbumContract.bytecode}).send({\"from\":accounts[0]});\n    // // let newInstance = await new web3.eth.Contract(AlbumContract.abi,\"0x5f5518D4e8a4AAe8eab848f1999d9858067619E1\");\n    // // console.log(newInstance);\n    // // // await newInstance.methods.setData(\"Peace\", \"Demon Hunter\", \"https://target.scene7.com/is/image/Target/GUEST_8eb42664-16dc-4f03-9e71-dadadbf1abe4?wid=488&hei=488&fmt=pjpeg\").send({\"from\":accounts[0]});\n    // // let response2 = await newInstance.methods.album().call();\n    // // // console.log(\"contract: \", response);\n\n    // console.log(albumAdresses);\n  };\n\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\" style={{minHeight: \"100vh\"}}>\n          <header>\n            <Navbar path=\"/\" />\n          </header>\n          <Switch>\n            <Home path=\"/home\" />\n            <Albums path=\"/Albums\"/>\n            <Songs path=\"/Songs\" />\n            <AddAlbum path=\"/AddAlbum\"/>\n            <AddSong path=\"/AddSong\"/>\n            <Login path=\"/login\" />\n          </Switch>\n          <Footer path=\"/\" />\n        </div >\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/reportWebVitals.js",[],"/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/Components/Navbar/Navbar.js",["64"],"import React from 'react'\nimport './Navbar.css';\n\n// // navbar-expand-lg fixed-top navbar navbar-dark bg-dark\nfunction Navbar() {\n    return (\n        <nav class=\"navbar navbar-icon-top navbar-expand-lg navbar-dark bg-dark\">\n            <img width=\"50px\" src=\"https://www.freepnglogos.com/uploads/spotify-logo-png/spotify-icon-marilyn-scott-0.png\" alt=\"logo\"></img>\n            <a class=\"navbar-brand\" style={{ marginLeft: \"10px\" }} href=\"#\">Spotify</a>\n            <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span class=\"navbar-toggler-icon\"></span>\n            </button>\n\n            <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                <ul class=\"navbar-nav mr-auto\">\n                    <li class=\"nav-item active\">\n                        <a class=\"nav-link\" href=\"/Home\">\n                            <i class=\"fa fa-home\"></i>\n                                Home\n          <span class=\"sr-only\">(current)</span>\n                        </a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"/Albums\">\n                            <i class=\"fa fa-envelope-o\">\n                                <span class=\"badge badge-danger\">+</span>\n                            </i>\n                            Albums\n                         </a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"/Songs\">\n                            <i class=\"fa fa-envelope-o\">\n                                <span class=\"badge badge-danger\">+</span>\n                            </i>\n                            Songs\n                         </a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"/AddAlbum\">\n                            <i class=\"fa fa-envelope-o\">\n                                <span class=\"badge badge-danger\">+</span>\n                            </i>\n                            New Album\n                         </a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"/AddSong\">\n                            <i class=\"fa fa-envelope-o\">\n                                <span class=\"badge badge-danger\">+</span>\n                            </i>\n                            New Song\n                         </a>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n\n    )\n}\n\n\nexport default Navbar;","/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/Components/Albums/AddAlbum.js",["65","66","67","68","69","70","71","72"],"import React from \"react\";\nimport { AvForm, AvField, AvInput } from \"availity-reactstrap-validation\";\nimport Image from \"react-bootstrap/Image\";\n\nimport {\n  Input,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  Label,\n  Container,\n  Row,\n  Col,\n} from \"reactstrap\";\n\nimport { Confirm } from \"./Confirm\";\nimport \"../ConfirmStyle.css\";\nimport getWeb3 from \"../../getWeb3.js\";\nimport { Component } from \"react\";\nimport AlbumContract from '../../contracts/Album.json';\n\n// let web3;\n// let accounts;\n\n// const setWeb3 = async() =>{\n//    web3 = await getWeb3();\n//    accounts = await web3.eth.getAccounts();\n// }\n// const createAlbum = async (e,values) => {\n//   e.preventDefault();\n//   console.log(values);\n//   const web3 = await getWeb3();\n//   console.log(web3);\n//   // this.props.addressesCall(\"\");\n// }; onValidSubmit={createAlbum}\n\n\n\nclass AddAlbum extends Component {\n  constructor(props){\n    super(props)\n    this.state = {web3: null, accounts: null};\n  }\n\n  createAlbum = async (e,values) => {\n  //Sometimes it works\n  e.preventDefault();\n  console.log(values);\n  let newInstance = await new this.state.web3.eth.Contract(AlbumContract.abi).deploy({data: AlbumContract.bytecode}).send({\"from\":this.state.accounts[0]});\n  await newInstance.methods.setData(values.album,values.artist,values.albumUrl).send({\"from\":this.state.accounts[0]});\n  this.props.addressesCall(newInstance.address);\n}; \n\n\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 mainInstance.\n      const web3 = await getWeb3();\n      console.log(\"web3\",web3);\n      const accounts = await web3.eth.getAccounts();\n\n      this.setState({web3:web3, accounts:accounts});\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n  \n  render(){\n    return (\n      <Container className=\"text-white\">\n        <AvForm onValidSubmit={this.createAlbum}>\n          <Row>\n            <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n              <AvField\n                name=\"album\"\n                label=\"nombre\"\n                type=\"text\"\n                validate={{\n                  required: { value: true, errorMessage: \"campo requerido\" },\n                }}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n              <AvField\n                name=\"artist\"\n                label=\"Artista\"\n                type=\"text\"\n                validate={{\n                  required: { value: true, errorMessage: \"campo requerido\" },\n                }}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n              <AvField name=\"albumUrl\" label=\"url imagen\" type=\"text\" />\n            </Col>\n          </Row>\n          <Row>\n            <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n              <Image\n                src=\"https://upload.wikimedia.org/wikipedia/en/e/eb/Money_1973.jpg\"\n                thumbnail\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n              <Button color=\"success\">guardar</Button>\n            </Col>\n          </Row>\n        </AvForm>\n      </Container>\n    );\n  }\n}\n\nexport default AddAlbum;\n","/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/Components/Login/Login.js",[],"/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/getWeb3.js",[],"/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/Components/Albums/Albums.js",["73","74","75","76"],"import React from 'react'\nimport { Component } from 'react'\nimport { Card } from 'react-bootstrap'\n\nimport getWeb3 from \"../../getWeb3.js\";\nimport AlbumContract from '../../contracts/Album.json';\n\n\nclass Albums extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            search: \"\",\n            web3: null,\n            accounts: null,\n            contract: null,\n            albumAddresses: [],\n            albumInstances: [],\n            albumsList: []\n        };\n    }\n    componentDidMount = async () => {\n        try {\n            // Get network provider and web3 mainInstance.\n            const web3 = await getWeb3();\n            // Use web3 to get the user's accounts.\n            const accounts = await web3.eth.getAccounts();\n\n            // Get the contract mainInstance.\n            const networkId = 5777;\n            const deployedNetwork = AlbumContract.networks[networkId];\n            const mainInstance = new web3.eth.Contract(\n                AlbumContract.abi,\n                deployedNetwork && deployedNetwork.address\n            );\n            mainInstance.address = deployedNetwork.address;\n            // Set web3, accounts, and contract to the state, and then proceed with an\n            // example of interacting with the contract's methods.\n            this.setState({ web3, accounts, contract: mainInstance }, this.initiate);\n        } catch (error) {\n            // Catch any errors for any of the above operations.\n            alert(\n                `Failed to load web3, accounts, or contract. Check console for details.`,\n            );\n            console.error(error);\n        }\n    };\n\n    initiate = async () => {\n        const { accounts, web3, albumAddresses, albumsList } = this.state;\n        const blockNumber = await web3.eth.getBlockNumber();\n        let transactions = [];\n        for (let index = 1; index <= blockNumber; index++) {\n            let block = await web3.eth.getBlock(index);\n            let transaction = block.transactions[0];\n            transactions.indexOf(transaction) === -1 ? transactions.push(transaction) : console.log(\"exists\");\n        }\n\n        for (let index = 0; index < transactions.length; index++) {\n            let transactionInstance = await web3.eth.getTransaction(transactions[index]);\n            albumAddresses.indexOf(transactionInstance.to) === -1 ? albumAddresses.push(transactionInstance.to) : console.log(\"exists\")\n        }\n\n\n        this.setState({ albumAddresses: albumAddresses });\n\n        console.log(albumAddresses);\n        for (let index = 0; index < albumAddresses.length; index++) {\n            if (albumAddresses[index] != null) {\n                let instance = await new web3.eth.Contract(AlbumContract.abi, albumAddresses[index]);\n                let album = await instance.methods.album().call();\n                let artist = await instance.methods.artist().call();\n                let image = await instance.methods.imageurl().call();\n                albumsList.push({\n                    \"id\": albumAddresses[index],\n                    \"name\": album,\n                    \"artist\": artist,\n                    \"image\": image\n                })\n            }\n        }\n\n        this.setState({ albumsList: albumsList });\n\n\n        // console.log(\"account: \", accounts[0]);\n        // console.log(\"methods\", contract.methods);\n        // // // await contract.methods.setData(\"War\", \"Demon Hunter\", \"https://upload.wikimedia.org/wikipedia/en/c/cb/DemonHunter_War.jpg\").send({ from: accounts[0] });\n        // // let response  = await contract.methods.album().call();\n        // // // Creating new contracts\n        // // //let newInstance = await new web3.eth.Contract(AlbumContract.abi).deploy({data: AlbumContract.bytecode}).send({\"from\":accounts[0]});\n        // // let newInstance = await new web3.eth.Contract(AlbumContract.abi,\"0x5f5518D4e8a4AAe8eab848f1999d9858067619E1\");\n        // // console.log(newInstance);\n        // // // await newInstance.methods.setData(\"Peace\", \"Demon Hunter\", \"https://target.scene7.com/is/image/Target/GUEST_8eb42664-16dc-4f03-9e71-dadadbf1abe4?wid=488&hei=488&fmt=pjpeg\").send({\"from\":accounts[0]});\n        // // let response2 = await newInstance.methods.album().call();\n        // // // console.log(\"contract: \", response);\n\n        // console.log(albumAddresses);\n    };\n\n\n    renderCard = card => {\n        const { search } = this.state;\n        return (\n            <div className=\"card-columns text-center col d-flex justify-content-center\" onClick={(e) => {\n                e.preventDefault();\n                window.location.href = '/Songs';\n            }} >\n                <div>\n                    <div className=\"card text-white bg-dark mb-3\" style={{ width: \"25rem\" }} >\n                        <img className=\"card-img-top\" src={card.image} alt=\"Card image cap\" />\n                        <div className=\"card-body\">\n                            <h3 className=\"card-text center\">{card.name}</h3>\n                            <p className=\"card-text\">{card.artist}</p>\n                        </div>\n                        {/* <a href=\"#\" class=\"btn btn-primary\" ></a> */}\n                    </div>\n                </div>\n            </div >\n        );\n    };\n\n    onchange = e => {\n        this.setState({ search: e.target.value });\n    };\n\n    render() {\n        const { search, albumsList } = this.state;\n        const filteredAlbums = albumsList.filter(album => {\n            return album.name.toLowerCase().indexOf(search.toLowerCase()) !== -1;\n        });\n        return (\n            <div style={{ display: \"inline-block\" }} >\n                <div style={{ width: \"250px\", float: \"right\", clear: \"both\", marginTop: \"20px\", marginBottom: \"20px\", display: \"inline-block\" }}>\n                    <input class=\"form-control mr-sm-2\" onChange={this.onchange} type=\"text\" placeholder=\"Search\" aria-label=\"Search\" />\n                    <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\" style={{ float: \"right\" }}>Search</button>\n                </div>\n                <div className=\"card-columns \" style={{ marginTop: \"85px\", clear: \"right\" }}>\n                    {/* {albumInfo.map(renderCard())} */}\n                    {filteredAlbums.map(album => {\n                        return this.renderCard(album);\n                    })}\n                </div>\n            </div >\n        );\n    }\n\n\n}\n\nexport default Albums;","/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/Components/Footer/Footer.js",[],"/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/Components/Home/Home.js",[],"/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/Components/Albums/Confirm.js",[],"/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/Components/Albums/AddSong.js",["77","78","79","80","81","82","83","84","85","86"],"import React from \"react\";\nimport { AvForm, AvField, AvInput } from \"availity-reactstrap-validation\";\nimport Image from \"react-bootstrap/Image\";\n\nimport {\n    Input,\n    Button,\n    Modal,\n    ModalHeader,\n    ModalFooter,\n    ModalBody,\n    Label,\n    Container,\n    Row,\n    Col,\n} from \"reactstrap\";\n\nimport { Confirm } from \"./Confirm\";\nimport \"../ConfirmStyle.css\";\nimport getWeb3 from \"../../getWeb3.js\";\nimport { Component } from \"react\";\nimport AlbumContract from '../../contracts/Album.json';\n\n// let web3;\n// let accounts;\n\n// const setWeb3 = async() =>{\n//    web3 = await getWeb3();\n//    accounts = await web3.eth.getAccounts();\n// }\n// const createAlbum = async (e,values) => {\n//   e.preventDefault();\n//   console.log(values);\n//   const web3 = await getWeb3();\n//   console.log(web3);\n//   // this.props.addressesCall(\"\");\n// }; onValidSubmit={createAlbum}\n\n\n\nclass AddSong extends Component {\n    createSong = async (e, values) => {\n        //Sometimes it works\n        e.preventDefault();\n        console.log(values);\n        let newInstance = await new this.state.web3.eth.Contract(AlbumContract.abi,values.select);\n        await newInstance.methods.addSong(values.song,values.duration,values.genre).send({\"from\":this.state.accounts[0]});\n    };\n\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            search: \"\",\n            web3: null,\n            accounts: null,\n            contract: null,\n            albumAddresses: [],\n            albumInstances: [],\n            albumsList: []\n        };\n    }\n    componentDidMount = async () => {\n        try {\n            // Get network provider and web3 mainInstance.\n            const web3 = await getWeb3();\n            // Use web3 to get the user's accounts.\n            const accounts = await web3.eth.getAccounts();\n\n            // Get the contract mainInstance.\n            const networkId = 5777;\n            const deployedNetwork = AlbumContract.networks[networkId];\n            const mainInstance = new web3.eth.Contract(\n                AlbumContract.abi,\n                deployedNetwork && deployedNetwork.address\n            );\n            mainInstance.address = deployedNetwork.address;\n            // Set web3, accounts, and contract to the state, and then proceed with an\n            // example of interacting with the contract's methods.\n            this.setState({ web3, accounts, contract: mainInstance }, this.initiate);\n        } catch (error) {\n            // Catch any errors for any of the above operations.\n            alert(\n                `Failed to load web3, accounts, or contract. Check console for details.`,\n            );\n            console.error(error);\n        }\n    };\n\n    initiate = async () => {\n        const { accounts, web3, albumAddresses, albumsList } = this.state;\n        const blockNumber = await web3.eth.getBlockNumber();\n        let transactions = [];\n        for (let index = 1; index <= blockNumber; index++) {\n            let block = await web3.eth.getBlock(index);\n            let transaction = block.transactions[0];\n            transactions.indexOf(transaction) === -1 ? transactions.push(transaction) : console.log(\"exists\");\n        }\n\n        for (let index = 0; index < transactions.length; index++) {\n            let transactionInstance = await web3.eth.getTransaction(transactions[index]);\n            albumAddresses.indexOf(transactionInstance.to) === -1 ? albumAddresses.push(transactionInstance.to) : console.log(\"exists\")\n        }\n\n\n        this.setState({ albumAddresses: albumAddresses });\n\n        console.log(albumAddresses);\n        for (let index = 0; index < albumAddresses.length; index++) {\n            if (albumAddresses[index] != null) {\n                let instance = await new web3.eth.Contract(AlbumContract.abi, albumAddresses[index]);\n                let album = await instance.methods.album().call();\n                let artist = await instance.methods.artist().call();\n                let image = await instance.methods.imageurl().call();\n                albumsList.push({\n                    \"id\": albumAddresses[index],\n                    \"name\": album,\n                    \"artist\": artist,\n                    \"image\": image\n                })\n            }\n        }\n\n        this.setState({ albumsList: albumsList });\n\n\n        // console.log(\"account: \", accounts[0]);\n        // console.log(\"methods\", contract.methods);\n        // // // await contract.methods.setData(\"War\", \"Demon Hunter\", \"https://upload.wikimedia.org/wikipedia/en/c/cb/DemonHunter_War.jpg\").send({ from: accounts[0] });\n        // // let response  = await contract.methods.album().call();\n        // // // Creating new contracts\n        // // //let newInstance = await new web3.eth.Contract(AlbumContract.abi).deploy({data: AlbumContract.bytecode}).send({\"from\":accounts[0]});\n        // // let newInstance = await new web3.eth.Contract(AlbumContract.abi,\"0x5f5518D4e8a4AAe8eab848f1999d9858067619E1\");\n        // // console.log(newInstance);\n        // // // await newInstance.methods.setData(\"Peace\", \"Demon Hunter\", \"https://target.scene7.com/is/image/Target/GUEST_8eb42664-16dc-4f03-9e71-dadadbf1abe4?wid=488&hei=488&fmt=pjpeg\").send({\"from\":accounts[0]});\n        // // let response2 = await newInstance.methods.album().call();\n        // // // console.log(\"contract: \", response);\n\n        // console.log(albumAddresses);\n    };\n    render() {\n        return (\n            <Container className=\"text-white\">\n                <AvForm onValidSubmit={this.createSong}>\n                    <Row>\n                        <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n                            <AvField type=\"select\" name=\"select\" label=\"Album\">\n                                {this.state.albumsList.map(element=> <option key={element.id} value={element.id}>{element.name}</option>)}\n                            </AvField>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n                            <AvField\n                                name=\"song\"\n                                label=\"Canción\"\n                                type=\"text\"\n                                validate={{\n                                    required: { value: true, errorMessage: \"campo requerido\" },\n                                }}\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n                            <AvField\n                                name=\"duration\"\n                                label=\"Duración\"\n                                type=\"text\"\n                                validate={{\n                                    required: { value: true, errorMessage: \"campo requerido\" },\n                                }}\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n                            <AvField name=\"genre\" label=\"Género\" type=\"text\" />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n                            <Button color=\"success\">Guardar</Button>\n                        </Col>\n                    </Row>\n                </AvForm>\n            </Container>\n        );\n    }\n}\n\nexport default AddSong;\n","/home/megaten/Desktop/UNITEC/Concurrencia/proyecto-concurrencia/src/Components/Albums/Songs.js",["87","88","89","90","91"],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":8,"column":10,"nodeType":"98","messageId":"99","endLine":8,"endColumn":15},{"ruleId":"96","severity":1,"message":"100","line":14,"column":10,"nodeType":"98","messageId":"99","endLine":14,"endColumn":13},{"ruleId":"101","severity":1,"message":"102","line":9,"column":13,"nodeType":"103","endLine":9,"endColumn":77},{"ruleId":"96","severity":1,"message":"104","line":2,"column":27,"nodeType":"98","messageId":"99","endLine":2,"endColumn":34},{"ruleId":"96","severity":1,"message":"105","line":6,"column":3,"nodeType":"98","messageId":"99","endLine":6,"endColumn":8},{"ruleId":"96","severity":1,"message":"106","line":8,"column":3,"nodeType":"98","messageId":"99","endLine":8,"endColumn":8},{"ruleId":"96","severity":1,"message":"107","line":9,"column":3,"nodeType":"98","messageId":"99","endLine":9,"endColumn":14},{"ruleId":"96","severity":1,"message":"108","line":10,"column":3,"nodeType":"98","messageId":"99","endLine":10,"endColumn":14},{"ruleId":"96","severity":1,"message":"109","line":11,"column":3,"nodeType":"98","messageId":"99","endLine":11,"endColumn":12},{"ruleId":"96","severity":1,"message":"110","line":12,"column":3,"nodeType":"98","messageId":"99","endLine":12,"endColumn":8},{"ruleId":"96","severity":1,"message":"111","line":18,"column":10,"nodeType":"98","messageId":"99","endLine":18,"endColumn":17},{"ruleId":"96","severity":1,"message":"112","line":3,"column":10,"nodeType":"98","messageId":"99","endLine":3,"endColumn":14},{"ruleId":"96","severity":1,"message":"113","line":50,"column":17,"nodeType":"98","messageId":"99","endLine":50,"endColumn":25},{"ruleId":"96","severity":1,"message":"114","line":103,"column":17,"nodeType":"98","messageId":"99","endLine":103,"endColumn":23},{"ruleId":"115","severity":1,"message":"116","line":111,"column":25,"nodeType":"103","endLine":111,"endColumn":95},{"ruleId":"96","severity":1,"message":"104","line":2,"column":27,"nodeType":"98","messageId":"99","endLine":2,"endColumn":34},{"ruleId":"96","severity":1,"message":"117","line":3,"column":8,"nodeType":"98","messageId":"99","endLine":3,"endColumn":13},{"ruleId":"96","severity":1,"message":"105","line":6,"column":5,"nodeType":"98","messageId":"99","endLine":6,"endColumn":10},{"ruleId":"96","severity":1,"message":"106","line":8,"column":5,"nodeType":"98","messageId":"99","endLine":8,"endColumn":10},{"ruleId":"96","severity":1,"message":"107","line":9,"column":5,"nodeType":"98","messageId":"99","endLine":9,"endColumn":16},{"ruleId":"96","severity":1,"message":"108","line":10,"column":5,"nodeType":"98","messageId":"99","endLine":10,"endColumn":16},{"ruleId":"96","severity":1,"message":"109","line":11,"column":5,"nodeType":"98","messageId":"99","endLine":11,"endColumn":14},{"ruleId":"96","severity":1,"message":"110","line":12,"column":5,"nodeType":"98","messageId":"99","endLine":12,"endColumn":10},{"ruleId":"96","severity":1,"message":"111","line":18,"column":10,"nodeType":"98","messageId":"99","endLine":18,"endColumn":17},{"ruleId":"96","severity":1,"message":"113","line":91,"column":17,"nodeType":"98","messageId":"99","endLine":91,"endColumn":25},{"ruleId":"96","severity":1,"message":"112","line":3,"column":10,"nodeType":"98","messageId":"99","endLine":3,"endColumn":14},{"ruleId":"96","severity":1,"message":"113","line":51,"column":17,"nodeType":"98","messageId":"99","endLine":51,"endColumn":25},{"ruleId":"96","severity":1,"message":"118","line":51,"column":49,"nodeType":"98","messageId":"99","endLine":51,"endColumn":59},{"ruleId":"96","severity":1,"message":"114","line":109,"column":17,"nodeType":"98","messageId":"99","endLine":109,"endColumn":23},{"ruleId":"115","severity":1,"message":"116","line":114,"column":25,"nodeType":"103","endLine":114,"endColumn":95},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Nav' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'AvInput' is defined but never used.","'Input' is defined but never used.","'Modal' is defined but never used.","'ModalHeader' is defined but never used.","'ModalFooter' is defined but never used.","'ModalBody' is defined but never used.","'Label' is defined but never used.","'Confirm' is defined but never used.","'Card' is defined but never used.","'accounts' is assigned a value but never used.","'search' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'Image' is defined but never used.","'albumsList' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]